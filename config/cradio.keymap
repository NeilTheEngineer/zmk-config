/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <include/locale/keys_en_gb_extended.h>

#define default         0
#define number          1
#define special_char    2
#define navi            3
#define BLE             4

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lc: Layer_cycle {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_CYCLE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&to>;

            hold-trigger-key-positions = <33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q  &kp W           &kp E       &kp R                 &kp T         &kp Y      &kp U        &kp I       &kp O            &kp P
&kp A  &hm LEFT_WIN S  &hm LALT D  &hm RCTRL T           &kp G         &kp H      &hm LCTRL J  &hm RALT K  &hm RIGHT_WIN L  &kp SEMICOLON
&kp Z  &kp X           &kp C       &kp V                 &kp B         &kp N      &kp M        &kp COMMA   &kp PERIOD       &kp SLASH
                                   &mt LC(LS(LALT)) SPC  &sk LSHIFT    &sk RCTRL  &lc 1 0
            >;
        };

        number {
            bindings = <
&kp ESC    &kp ATSN    &td LC(LG(LS(N4))) LS(N3)  &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp KP_NUMBER_0  &kp KP_NUMBER_7        &kp KP_NUMBER_8            &kp KP_NUMBER_9            &kp KP_MINUS
&kp TAB    &kp EQUAL   &kp LA(RBKT)               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp PERIOD       &hm RCTRL KP_NUMBER_4  &hm RIGHT_ALT KP_NUMBER_5  &hm RIGHT_WIN KP_NUMBER_6  &kp KP_PLUS
&kp TILDE  &kp LA(N3)  &kp LA(LBKT)               &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp KP_DIVIDE    &kp KP_NUMBER_1        &kp KP_NUMBER_2            &kp KP_NUMBER_3            &kp KP_MULTIPLY
                                                  &to 0                 &sk LSHIFT               &kp SPACE        &lc 0 2
            >;
        };

        special_char {
            bindings = <
&kp ESC  &kp C_PP  &kp C_PREV    &kp C_NEXT    &kp LS(MINUS)    &kp EXCL           &kp AMPERSAND     &kp N8           &kp DOLLAR     &trans
&kp TAB  &trans    &kp C_VOL_DN  &kp C_VOL_UP  &kp LS(EQUAL)    &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp AT_SIGN      &kp POUND      &kp ENTER
&to 4    &kp AMPS  &kp SLASH     &kp STAR      &kp DOT          &kp UNDERSCORE     &kp EQUAL         &kp NON_US_BSLH  &kp TILDE  &kp CARET
                                 &to 0         &sk LGUI         &kp SPACE          &lc 0 3
            >;
        };

        navi {
            bindings = <
&trans               &none  &none  &none  &kp NUM_5    &kp LG(LBKT)  &kp LC(LS(TAB))  &kp RC(TAB)   &kp LG(RBKT)  &trans
&kp F1               &none  &none  &none  &kp DEL      &kp LEFT      &kp DOWN         &kp UP        &kp RIGHT     &kp ENTER
&td LG(GRAVE) GRAVE  &none  &none  &none  &trans       &none         &kp PG_DN        &kp K_VOL_DN  &trans        &trans
                                   &to 0  &trans       &sk RALT      &to 1
            >;
        };

        BLE {
            bindings = <
&trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                    &to 0   &trans    &trans  &to 1
            >;
        };
    };
};
